<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="org.example.spring.springmvcorm.user" />
    <tx:annotation-driven />

    <!-- 1. DATA SOURCE - mySql DB -->
    <bean class="org.springframework.jdbc.datasource.DriverManagerDataSource"
          name="dataSource"
          p:driverClassName="com.mysql.cj.jdbc.Driver"
          p:url="jdbc:mysql://localhost/mydb"
          p:username="root"
          p:password="test1234" />

    <!-- 2. SESSION FACTORY takes care of establishing the connection & provides a hibernate session at the end - hibernate5 -->
    <bean class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"
          name="sessionFactory"
          p:dataSource-ref="dataSource">
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop> <!-- generates sql queries from the objects we provide -->
                <prop key="hibernate.show_sql">true</prop>                              <!-- should display all the queries it creates -->
            </props>
        </property>
        <property name="annotatedClasses">
            <list>
                <value>org.example.spring.springmvcorm.user.entity.User</value>
                <value>org.example.spring.springmvcorm.user.entity.Person</value>
            </list>
        </property>
    </bean>

    <!-- 3. HIBERNATE TEMPLATE - hibernate5 -->
    <bean class="org.springframework.orm.hibernate5.HibernateTemplate"
          name="hibernateTemplate" p:sessionFactory-ref="sessionFactory" />


    <!-- 4. DAO IMPLEMENTATION -->
    <!-- instead of @Component-@Autowired annotations & context:component-scan tag could we create and use a bean -->
<!--    <bean class="org.example.spring.springmvcorm.user.dao.impl.UserDaoImpl"-->
<!--          name="dao-bean">-->
<!--        <property name="hibernateTemplate">-->
<!--            <ref bean="hibernateTemplate" />-->
<!--        </property>-->
<!--    </bean>-->

    <!-- 5. TRANSACTION MANAGER - hibernate5 -->
    <bean class="org.springframework.orm.hibernate5.HibernateTransactionManager"
          name="transactionManager" p:sessionFactory-ref="sessionFactory" />


    <!-- VIEW RESOLVER configuration !! -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" name="viewResolver">    <!-- class resolves a complete view name -->
        <property name="cache" value="false" />
        <property name="prefix">
            <value>/WEB-INF/jsps/</value>
        </property>
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>

    <!-- STAX PARSER -->
    <bean class="org.example.spring.springmvcorm.user.parser.impl.STAXParser" name="staxParser"></bean>

    <!-- FROM git RESOURCE -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="org.example.spring.springmvcorm.user.interceptor.ProcessingTimeInterceptor" />
        </mvc:interceptor>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
            <property name="paramName" value="lang"></property>
        </bean>
    </mvc:interceptors>

    <!-- already in use (check above & multipart-config in web.xml) -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="favorPathExtension" value="false" />
    </bean>
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="209715200" />
        <property name="maxInMemorySize" value="10485760" />
    </bean>

<!--    <mvc:default-servlet-handler />-->

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
        <property name="defaultLocale" value="en_US"></property>
    </bean>


    <!-- spring REST API web services -->
    <!--  https://www.digitalocean.com/community/tutorials/spring-restcontroller  -->
    <bean id="jsonMessageConverter"
                class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
    <bean id="xmlMessageConverter"
                class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="jsonMessageConverter" />
                <ref bean="xmlMessageConverter" />
            </list>
        </property>
    </bean>

</beans>